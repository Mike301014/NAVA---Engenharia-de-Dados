# -*- coding: utf-8 -*-
"""resolucao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XaH_Y9rHybw6cVm-0pErRpHn782FxKxN
"""

from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.window import Window as W

spark = SparkSession.builder.getOrCreate()

caminho_saldo = '/content/base/tabela_saldo_inicial.txt'
caminho_movimentacoes_01 = '/content/base/movimentacao_dia_02_04_2022.txt'
caminho_movimentacoes_02 = '/content/base/movimentacao_dia_03_04_2022.txt'

df_saldo = spark.read.csv(caminho_saldo, header=True, inferSchema=True, sep=';').alias('s')
df_movimentacoes_1 = spark.read.csv(caminho_movimentacoes_01, header=True, inferSchema=True, sep=';')
df_movimentacoes_2 = spark.read.csv(caminho_movimentacoes_02, header=True, inferSchema=True, sep=';')

# Objetivo: Apresentar o saldo atualizado da conta corrente de todos os clientes
# separados por data em que seja possível reprocessar/identificar as alterações de
# saldos entre os dias.

# * Os movimentos de estorno ou adição de saldos sempre acontecerão em datas
# posteriores as processadas, por exemplo,
# o estorno de 50,00 do dia 02/04/2022 veio no arquivo de movimentos do dia
# 03/04/2022 e por esse motivo se faz necessário o
# reprocessamento do saldo do dia 02/04/2022.

# ** À partir do cálculo do saldo inicial do cliente o mesmo deve aparecer para todas
# as próximas datas, caso não ocorra movimentação manter o saldo do dia anterior.

# *** À partir do momento que apareçam novos clientes nos arquivos de
# movimentação, deve-se manter o saldo do cliente mesmo não havendo mais
# movimentação nos dias posteriores.

df_movimentacoes = df_movimentacoes_1.union(df_movimentacoes_2).alias('m')

df_todas_as_contas = df_saldo.select('s.CPF').union(df_movimentacoes.select('m.CPF')).distinct()

df_todas_as_datas = df_saldo.select('s.data').union(df_movimentacoes.select('m.data'))

df_todas_as_datas = df_todas_as_datas.distinct()

df_contas_e_datas = df_todas_as_contas.crossJoin(df_todas_as_datas).orderBy('CPF', 'data').alias('c')

df_contas_e_datas.show()

# Resultado final:
# - Tabela contendo o saldo atualizado de todos os clientes por data, onde seja
# possível ter uma rastreabilidade entre um dia e outro.

df_saldo = df_saldo.withColumnRenamed(
    'Saldo_Inicial_CC', 'Movimentacao_dia'
)

df_todas_operacoes = df_saldo.select('CPF', 'data', 'Movimentacao_dia')
df_todas_operacoes = df_todas_operacoes.union(df_movimentacoes.select('CPF', 'data', 'Movimentacao_dia'))

df_operacoes_dia = df_todas_operacoes.groupBy('CPF', 'data').agg(F.sum('Movimentacao_dia').alias('Soma_da_Movimentacao_Diaria')).orderBy('CPF', 'data')

df_base_final = df_contas_e_datas.join(df_operacoes_dia, on=['CPF', 'data'], how='left')

window_base = W.partitionBy('CPF').orderBy('data')

df_base_final = df_base_final.withColumn(
    'Saldo_Final',
    F.sum(F.col('Soma_da_Movimentacao_Diaria')).over(window_base)
)

df_base_final.orderBy('CPF', 'data').show()